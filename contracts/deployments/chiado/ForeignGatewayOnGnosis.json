{
  "address": "0x573bcD6ee4aEe152eCC9Cafd2c0820Dc548AF6cC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veaOutbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_senderGateway",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_senderChainID",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "_courtID",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeForJuror",
          "type": "uint256"
        }
      ],
      "name": "ArbitrationCostModified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IArbitrable",
          "name": "_arbitrable",
          "type": "address"
        }
      ],
      "name": "DisputeCreation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "disputeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "blockhash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "localDisputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_choices",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "arbitrable",
          "type": "address"
        }
      ],
      "name": "OutgoingDispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrable",
          "name": "_arbitrable",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruling",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_JURORS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "arbitrationCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_courtID",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_feeForJuror",
          "type": "uint256"
        }
      ],
      "name": "changeCourtJurorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_senderGateway",
          "type": "address"
        }
      ],
      "name": "changeReceiverGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_veaOutbox",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gracePeriod",
          "type": "uint256"
        }
      ],
      "name": "changeVea",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "createDispute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_choices",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "createDisputeERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deprecatedVeaOutbox",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deprecatedVeaOutboxExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_disputeHash",
          "type": "bytes32"
        }
      ],
      "name": "disputeHashToForeignID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "disputeHashtoDisputeData",
      "outputs": [
        {
          "internalType": "uint248",
          "name": "id",
          "type": "uint248"
        },
        {
          "internalType": "bool",
          "name": "ruled",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "arbitrable",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "name": "feeForJuror",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageSender",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_disputeHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "relayRule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "senderChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "senderGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veaOutbox",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_disputeHash",
          "type": "bytes32"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xca576cbc21daddf0555f9db80b8b382a86fad5d8034b1cce5d9b9490a1da293d",
  "receipt": {
    "to": null,
    "from": "0xF50E77f2A2B6138D16c6c7511562E5C33c4B15A3",
    "contractAddress": "0x573bcD6ee4aEe152eCC9Cafd2c0820Dc548AF6cC",
    "transactionIndex": 0,
    "gasUsed": "1061085",
    "logsBloom": "0x
    "blockHash": "0x96d208d64294072571cb837b9d5012a730cd06708e818920bb934e6fd618e200",
    "transactionHash": "0xca576cbc21daddf0555f9db80b8b382a86fad5d8034b1cce5d9b9490a1da293d",
    "logs": [],
    "blockNumber": 4423423,
    "cumulativeGasUsed": "1061085",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF50E77f2A2B6138D16c6c7511562E5C33c4B15A3",
    "0xdFd7aDEb43d46FA3f16FB3e27F7fe85c3f5BD89D",
    "0xD60CD2151e118Dd796efcb1ceFFcF892226F9b3a",
    "0x0000000000000000000000000000000000000000000000000000000000066eed",
    "0x2DFC9c3141268e6eac04a7D6d98Fbf64BDe836a8"
  ],
  "numDeployments": 3,
  "solcInputHash": "36e3015201aa6368fd28e007dfb67b68",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veaOutbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_senderGateway\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderChainID\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"_courtID\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeForJuror\",\"type\":\"uint256\"}],\"name\":\"ArbitrationCostModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IArbitrable\",\"name\":\"_arbitrable\",\"type\":\"address\"}],\"name\":\"DisputeCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"disputeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockhash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localDisputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_choices\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"arbitrable\",\"type\":\"address\"}],\"name\":\"OutgoingDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrable\",\"name\":\"_arbitrable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_JURORS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"arbitrationCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_courtID\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_feeForJuror\",\"type\":\"uint256\"}],\"name\":\"changeCourtJurorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderGateway\",\"type\":\"address\"}],\"name\":\"changeReceiverGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veaOutbox\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"name\":\"changeVea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"createDispute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_choices\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createDisputeERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecatedVeaOutbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecatedVeaOutboxExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_disputeHash\",\"type\":\"bytes32\"}],\"name\":\"disputeHashToForeignID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"disputeHashtoDisputeData\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"id\",\"type\":\"uint248\"},{\"internalType\":\"bool\",\"name\":\"ruled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"arbitrable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"name\":\"feeForJuror\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageSender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_disputeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"relayRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veaOutbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_disputeHash\",\"type\":\"bytes32\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DisputeCreation(uint256,address)\":{\"details\":\"To be emitted when a dispute is created.\",\"params\":{\"_arbitrable\":\"The contract which created the dispute.\",\"_disputeID\":\"ID of the dispute.\"}},\"Ruling(address,uint256,uint256)\":{\"details\":\"To be raised when a ruling is given.\",\"params\":{\"_arbitrable\":\"The arbitrable receiving the ruling.\",\"_disputeID\":\"ID of the dispute in the Arbitrator contract.\",\"_ruling\":\"The ruling which was given.\"}}},\"kind\":\"dev\",\"methods\":{\"arbitrationCost(bytes)\":{\"details\":\"Compute the cost of arbitration. It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\",\"params\":{\"_extraData\":\"Can be used to give additional info on the dispute to be created.\"},\"returns\":{\"cost\":\"Required cost of arbitration.\"}},\"changeCourtJurorFee(uint96,uint256)\":{\"details\":\"Changes the `feeForJuror` property value of a specified court.\",\"params\":{\"_courtID\":\"The ID of the court.\",\"_feeForJuror\":\"The new value for the `feeForJuror` property value.\"}},\"changeGovernor(address)\":{\"details\":\"Changes the governor.\",\"params\":{\"_governor\":\"The address of the new governor.\"}},\"changeReceiverGateway(address)\":{\"details\":\"Changes the sender gateway.\",\"params\":{\"_senderGateway\":\"The address of the new sender gateway.\"}},\"changeVea(address,uint256)\":{\"details\":\"Changes the outbox.\",\"params\":{\"_gracePeriod\":\"The duration to accept messages from the deprecated bridge (if at all).\",\"_veaOutbox\":\"The address of the new outbox.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"relayRule(address,bytes32,uint256,address)\":{\"notice\":\"Relay the rule call from the home gateway to the arbitrable.\"}},\"notice\":\"Foreign Gateway Counterpart of `HomeGateway`\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/gateway/ForeignGatewayOnGnosis.sol\":\"ForeignGatewayOnGnosis\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@kleros/vea-contracts/src/interfaces/gateways/IReceiverGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\ninterface IReceiverGateway {\\n    function veaOutbox() external view returns (address);\\n\\n    function senderGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0xde6bdbe57ced7c1e79d62dca23aa8c2322e031da91ceac22cefd185f1e3740ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"src/arbitration/IArbitrable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./IArbitrator.sol\\\";\\n\\n/// @title IArbitrable\\n/// Arbitrable interface. Note that this interface follows the ERC-792 standard.\\n/// When developing arbitrable contracts, we need to:\\n/// - Define the action taken when a ruling is received by the contract.\\n/// - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\\ninterface IArbitrable {\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrator The arbitrator giving the ruling.\\n    /// @param _disputeID ID of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitrator indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev Give a ruling for a dispute. Must be called by the arbitrator.\\n    /// The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n    /// @param _disputeID ID of the dispute in the Arbitrator contract.\\n    /// @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0x2a5363c37d33749f6b53c288f6d1538f013c6efbb3df86e63eceaa8163a6b212\",\"license\":\"MIT\"},\"src/arbitration/IArbitrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./IArbitrable.sol\\\";\\n\\n/// @title Arbitrator\\n/// Arbitrator interface that implements the new arbitration standard.\\n/// Unlike the ERC-792 this standard doesn't have anything related to appeals, so each arbitrator can implement an appeal system that suits it the most.\\n/// When developing arbitrator contracts we need to:\\n/// - Define the functions for dispute creation (createDispute). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n/// - Define the functions for cost display (arbitrationCost).\\n/// - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\ninterface IArbitrator {\\n    /// @dev To be emitted when a dispute is created.\\n    /// @param _disputeID ID of the dispute.\\n    /// @param _arbitrable The contract which created the dispute.\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrable The arbitrable receiving the ruling.\\n    /// @param _disputeID ID of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitrable indexed _arbitrable, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev Create a dispute. Must be called by the arbitrable contract.\\n    /// Must pay at least arbitrationCost(_extraData).\\n    /// @param _choices Amount of choices the arbitrator can make in this dispute.\\n    /// @param _extraData Can be used to give additional info on the dispute to be created.\\n    /// @return disputeID ID of the dispute created.\\n    function createDispute(uint256 _choices, bytes calldata _extraData) external payable returns (uint256 disputeID);\\n\\n    /// @dev Compute the cost of arbitration. It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n    /// @param _extraData Can be used to give additional info on the dispute to be created.\\n    /// @return cost Required cost of arbitration.\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n}\\n\",\"keccak256\":\"0x8028f7d6a0fe07687f975fc51c9f889083ae1a409a134e8017a044701310948f\",\"license\":\"MIT\"},\"src/gateway/ForeignGatewayOnGnosis.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere, @shalzz, @unknownunknown1]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../arbitration/IArbitrable.sol\\\";\\nimport \\\"./interfaces/IForeignGateway.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// Foreign Gateway\\n/// Counterpart of `HomeGateway`\\ncontract ForeignGatewayOnGnosis is IForeignGateway {\\n    // ************************************* //\\n    // *         Enums / Structs           * //\\n    // ************************************* //\\n\\n    struct DisputeData {\\n        uint248 id;\\n        bool ruled;\\n        address arbitrable;\\n        uint256 paid;\\n        address relayer;\\n    }\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    event OutgoingDispute(\\n        bytes32 disputeHash,\\n        bytes32 blockhash,\\n        uint256 localDisputeID,\\n        uint256 _choices,\\n        bytes _extraData,\\n        address arbitrable\\n    );\\n\\n    event ArbitrationCostModified(uint96 indexed _courtID, uint256 _feeForJuror);\\n\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    uint256 public constant MIN_JURORS = 3; // The global default minimum number of jurors in a dispute.\\n    IERC20 public immutable weth; // WETH token on xDai.\\n    uint256 internal localDisputeID = 1; // The disputeID must start from 1 as the KlerosV1 proxy governor depends on this implementation. We now also depend on localDisputeID not ever being zero.\\n    mapping(uint96 => uint256) public feeForJuror; // feeForJuror[courtID], it mirrors the value on KlerosCore.\\n    address public governor;\\n    address public veaOutbox;\\n    uint256 public immutable senderChainID;\\n    address public override senderGateway;\\n    address public deprecatedVeaOutbox;\\n    uint256 public deprecatedVeaOutboxExpiration;\\n    mapping(bytes32 => DisputeData) public disputeHashtoDisputeData;\\n\\n    // ************************************* //\\n    // *        Function Modifiers         * //\\n    // ************************************* //\\n\\n    modifier onlyFromVea(address _messageSender) {\\n        require(\\n            veaOutbox == msg.sender ||\\n                (block.timestamp < deprecatedVeaOutboxExpiration && deprecatedVeaOutbox == msg.sender),\\n            \\\"Access not allowed: Vea Outbox only.\\\"\\n        );\\n        require(_messageSender == senderGateway, \\\"Access not allowed: Sender Gateway only.\\\");\\n        _;\\n    }\\n\\n    modifier onlyByGovernor() {\\n        require(governor == msg.sender, \\\"Access not allowed: Governor only.\\\");\\n        _;\\n    }\\n\\n    constructor(address _governor, address _veaOutbox, address _senderGateway, uint256 _senderChainID, IERC20 _weth) {\\n        governor = _governor;\\n        veaOutbox = _veaOutbox;\\n        senderGateway = _senderGateway;\\n        senderChainID = _senderChainID;\\n        weth = _weth;\\n    }\\n\\n    // ************************************* //\\n    // *           Governance              * //\\n    // ************************************* //\\n\\n    /// @dev Changes the governor.\\n    /// @param _governor The address of the new governor.\\n    function changeGovernor(address _governor) external {\\n        require(governor == msg.sender, \\\"Access not allowed: Governor only.\\\");\\n        governor = _governor;\\n    }\\n\\n    /// @dev Changes the outbox.\\n    /// @param _veaOutbox The address of the new outbox.\\n    /// @param _gracePeriod The duration to accept messages from the deprecated bridge (if at all).\\n    function changeVea(address _veaOutbox, uint256 _gracePeriod) external onlyByGovernor {\\n        // grace period to relay the remaining messages which are still going through the deprecated bridge.\\n        deprecatedVeaOutboxExpiration = block.timestamp + _gracePeriod;\\n        deprecatedVeaOutbox = veaOutbox;\\n        veaOutbox = _veaOutbox;\\n    }\\n\\n    /// @dev Changes the sender gateway.\\n    /// @param _senderGateway The address of the new sender gateway.\\n    function changeReceiverGateway(address _senderGateway) external {\\n        require(governor == msg.sender, \\\"Access not allowed: Governor only.\\\");\\n        senderGateway = _senderGateway;\\n    }\\n\\n    /// @dev Changes the `feeForJuror` property value of a specified court.\\n    /// @param _courtID The ID of the court.\\n    /// @param _feeForJuror The new value for the `feeForJuror` property value.\\n    function changeCourtJurorFee(uint96 _courtID, uint256 _feeForJuror) external onlyByGovernor {\\n        feeForJuror[_courtID] = _feeForJuror;\\n        emit ArbitrationCostModified(_courtID, _feeForJuror);\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    function createDispute(\\n        uint256 /*_choices*/,\\n        bytes calldata /*_extraData*/\\n    ) external payable override returns (uint256 disputeID) {\\n        revert(\\\"Fees should be paid in WETH\\\");\\n    }\\n\\n    function createDisputeERC20(\\n        uint256 _choices,\\n        bytes calldata _extraData,\\n        uint256 _amount\\n    ) external override returns (uint256 disputeID) {\\n        // This check is duplicated in xKlerosLiquid and transferred is done there as well.\\n        require(_amount >= arbitrationCost(_extraData), \\\"Not paid enough for arbitration\\\");\\n\\n        disputeID = localDisputeID++;\\n        uint256 chainID;\\n        assembly {\\n            chainID := chainid()\\n        }\\n        bytes32 disputeHash = keccak256(\\n            abi.encodePacked(\\n                chainID,\\n                blockhash(block.number - 1),\\n                \\\"createDispute\\\",\\n                disputeID,\\n                _choices,\\n                _extraData,\\n                msg.sender\\n            )\\n        );\\n\\n        disputeHashtoDisputeData[disputeHash] = DisputeData({\\n            id: uint248(disputeID),\\n            arbitrable: msg.sender,\\n            paid: _amount,\\n            relayer: address(0),\\n            ruled: false\\n        });\\n\\n        emit OutgoingDispute(disputeHash, blockhash(block.number - 1), disputeID, _choices, _extraData, msg.sender);\\n        emit DisputeCreation(disputeID, IArbitrable(msg.sender));\\n    }\\n\\n    function arbitrationCost(bytes calldata _extraData) public view override returns (uint256 cost) {\\n        (uint96 courtID, uint256 minJurors) = extraDataToCourtIDMinJurors(_extraData);\\n        cost = feeForJuror[courtID] * minJurors;\\n    }\\n\\n    /// Relay the rule call from the home gateway to the arbitrable.\\n    function relayRule(\\n        address _messageSender,\\n        bytes32 _disputeHash,\\n        uint256 _ruling,\\n        address _relayer\\n    ) external override onlyFromVea(_messageSender) {\\n        DisputeData storage dispute = disputeHashtoDisputeData[_disputeHash];\\n\\n        require(dispute.id != 0, \\\"Dispute does not exist\\\");\\n        require(!dispute.ruled, \\\"Cannot rule twice\\\");\\n\\n        dispute.ruled = true;\\n        dispute.relayer = _relayer;\\n\\n        IArbitrable arbitrable = IArbitrable(dispute.arbitrable);\\n        arbitrable.rule(dispute.id, _ruling);\\n    }\\n\\n    function withdrawFees(bytes32 _disputeHash) external override {\\n        DisputeData storage dispute = disputeHashtoDisputeData[_disputeHash];\\n        require(dispute.id != 0, \\\"Dispute does not exist\\\");\\n        require(dispute.ruled, \\\"Not ruled yet\\\");\\n\\n        uint256 amount = dispute.paid;\\n        dispute.paid = 0;\\n        weth.transfer(dispute.relayer, amount);\\n    }\\n\\n    // ************************************* //\\n    // *           Public Views            * //\\n    // ************************************* //\\n\\n    function disputeHashToForeignID(bytes32 _disputeHash) external view override returns (uint256) {\\n        return disputeHashtoDisputeData[_disputeHash].id;\\n    }\\n\\n    // ************************ //\\n    // *       Internal       * //\\n    // ************************ //\\n\\n    function extraDataToCourtIDMinJurors(\\n        bytes memory _extraData\\n    ) internal view returns (uint96 courtID, uint256 minJurors) {\\n        // Note that here we ignore DisputeKitID\\n        if (_extraData.length >= 64) {\\n            assembly {\\n                // solium-disable-line security/no-inline-assembly\\n                courtID := mload(add(_extraData, 0x20))\\n                minJurors := mload(add(_extraData, 0x40))\\n            }\\n            if (feeForJuror[courtID] == 0) courtID = 0;\\n            if (minJurors == 0) minJurors = MIN_JURORS;\\n        } else {\\n            courtID = 0;\\n            minJurors = MIN_JURORS;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b2fe8b71160e0be6d07cbf73f04368cb899cc904de8c043da942654e559c020\",\"license\":\"MIT\"},\"src/gateway/interfaces/IForeignGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere, @shalzz]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../../arbitration/IArbitrator.sol\\\";\\nimport \\\"@kleros/vea-contracts/src/interfaces/gateways/IReceiverGateway.sol\\\";\\n\\ninterface IForeignGateway is IArbitrator, IReceiverGateway {\\n    /// Relay the rule call from the home gateway to the arbitrable.\\n    function relayRule(address _messageSender, bytes32 _disputeHash, uint256 _ruling, address _forwarder) external;\\n\\n    function withdrawFees(bytes32 _disputeHash) external;\\n\\n    // For cross-chain Evidence standard\\n    function disputeHashToForeignID(bytes32 _disputeHash) external view returns (uint256);\\n\\n    function createDisputeERC20(\\n        uint256 _choices,\\n        bytes calldata _extraData,\\n        uint256 _amount\\n    ) external returns (uint256 disputeID);\\n}\\n\",\"keccak256\":\"0xd081ed3d89ec00abb1c63b2e386b5b4486f02ddb00ed7c959adef3226e969fe9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600160005534801561001557600080fd5b50604051620011bc380380620011bc8339810160408190526100369161009d565b600280546001600160a01b03199081166001600160a01b039788161790915560038054821695871695909517909455600480549094169285169290921790925560a09190915216608052610108565b6001600160a01b038116811461009a57600080fd5b50565b600080600080600060a086880312156100b557600080fd5b85516100c081610085565b60208701519095506100d181610085565b60408701519094506100e281610085565b6060870151608088015191945092506100fa81610085565b809150509295509295909350565b60805160a0516110876200013560003960006102500152600081816101ef0152610afa01526110876000f3fe60806040526004361061011f5760003560e01c8063979f8e65116100a0578063dea580b911610064578063dea580b9146103e7578063e4c0aaf414610407578063eaff425a14610427578063ebb711941461043c578063f7434ea91461045c57600080fd5b8063979f8e65146102d2578063a60a4db5146102f2578063c13517e114610312578063ce0aaf9514610325578063d3c617ff1461034557600080fd5b806345c90441116100e757806345c90441146102115780634def54551461023e57806367c519471461027257806369cd2cea1461029257806393626084146102b257600080fd5b80630c340a24146101245780631debaba6146101615780632e1db8901461018357806336e41d3d146101c75780633fc8cef3146101dd575b600080fd5b34801561013057600080fd5b50600254610144906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016d57600080fd5b5061018161017c366004610c6a565b61047c565b005b34801561018f57600080fd5b506101b961019e366004610c94565b6000908152600760205260409020546001600160f81b031690565b604051908152602001610158565b3480156101d357600080fd5b506101b960065481565b3480156101e957600080fd5b506101447f000000000000000000000000000000000000000000000000000000000000000081565b34801561021d57600080fd5b506101b961022c366004610cc4565b60016020526000908152604090205481565b34801561024a57600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b34801561027e57600080fd5b5061018161028d366004610ce6565b6104ed565b34801561029e57600080fd5b506101816102ad366004610d02565b610570565b3480156102be57600080fd5b50600554610144906001600160a01b031681565b3480156102de57600080fd5b506101b96102ed366004610d66565b6105bc565b3480156102fe57600080fd5b5061018161030d366004610db9565b61078a565b6101b9610320366004610dff565b6109aa565b34801561033157600080fd5b50600454610144906001600160a01b031681565b34801561035157600080fd5b506103a9610360366004610c94565b60076020526000908152604090208054600182015460028301546003909301546001600160f81b03831693600160f81b90930460ff16926001600160a01b039283169290911685565b604080516001600160f81b03909616865293151560208601526001600160a01b0392831693850193909352606084015216608082015260a001610158565b3480156103f357600080fd5b50600354610144906001600160a01b031681565b34801561041357600080fd5b50610181610422366004610d02565b6109f5565b34801561043357600080fd5b506101b9600381565b34801561044857600080fd5b50610181610457366004610c94565b610a41565b34801561046857600080fd5b506101b9610477366004610e4b565b610b6f565b6002546001600160a01b031633146104af5760405162461bcd60e51b81526004016104a690610e8d565b60405180910390fd5b6104b98142610ee5565b6006555060038054600580546001600160a01b038084166001600160a01b0319928316179092559091169216919091179055565b6002546001600160a01b031633146105175760405162461bcd60e51b81526004016104a690610e8d565b6001600160601b03821660008181526001602052604090819020839055517f20a6ef9c48f3a1ae927e70bc34e82d974c53d3c98c8fd9e731c4bacd5842c596906105649084815260200190565b60405180910390a25050565b6002546001600160a01b0316331461059a5760405162461bcd60e51b81526004016104a690610e8d565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60006105c88484610b6f565b8210156106175760405162461bcd60e51b815260206004820152601f60248201527f4e6f74207061696420656e6f75676820666f72206172626974726174696f6e0060448201526064016104a6565b60008054908061062683610efe565b9091555090504660008161063b600143610f17565b4084898989336040516020016106579796959493929190610f2a565b60408051601f19818403018152828252805160209182012060a0840183526001600160f81b038088168552600085840181815233878701908152606088018c815260808901848152868552600790975296909220965190511515600160f81b02921691909117855551600185810180546001600160a01b039384166001600160a01b031991821617909155945160028701559251600390950180549590911694909316939093179091559091507f0d14de2c628befa6eb7dc5c0b952832c96822914f589200f72acb5d8869982469082906107329043610f17565b40858a8a8a3360405161074b9796959493929190610f8a565b60405180910390a1604051339084907f141dfc18aa6a56fc816f44f0e9e2f1ebc92b15ab167770e17db5b084c10ed99590600090a35050949350505050565b60035484906001600160a01b03163314806107bb5750600654421080156107bb57506005546001600160a01b031633145b6108135760405162461bcd60e51b8152602060048201526024808201527f416363657373206e6f7420616c6c6f7765643a20566561204f7574626f78206f60448201526337363c9760e11b60648201526084016104a6565b6004546001600160a01b038281169116146108815760405162461bcd60e51b815260206004820152602860248201527f416363657373206e6f7420616c6c6f7765643a2053656e64657220476174657760448201526730bc9037b7363c9760c11b60648201526084016104a6565b6000848152600760205260408120805490916001600160f81b0390911690036108bc5760405162461bcd60e51b81526004016104a690610fe8565b8054600160f81b900460ff16156109095760405162461bcd60e51b815260206004820152601160248201527043616e6e6f742072756c6520747769636560781b60448201526064016104a6565b80546001600160f81b0316600160f81b811782556003820180546001600160a01b038681166001600160a01b031990921691909117909155600183015460405163188d362b60e11b81526004810193909352602483018790521690819063311a6c5690604401600060405180830381600087803b15801561098957600080fd5b505af115801561099d573d6000803e3d6000fd5b5050505050505050505050565b60405162461bcd60e51b815260206004820152601b60248201527f466565732073686f756c64206265207061696420696e2057455448000000000060448201526000906064016104a6565b6002546001600160a01b03163314610a1f5760405162461bcd60e51b81526004016104a690610e8d565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600760205260408120805490916001600160f81b039091169003610a7c5760405162461bcd60e51b81526004016104a690610fe8565b8054600160f81b900460ff16610ac45760405162461bcd60e51b815260206004820152600d60248201526c139bdd081c9d5b1959081e595d609a1b60448201526064016104a6565b6002810180546000909155600382015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b699190611018565b50505050565b6000806000610bb385858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610be592505050565b6001600160601b0382166000908152600160205260409020549193509150610bdc90829061103a565b95945050505050565b6000806040835110610c4257602083015191506040830151905060016000836001600160601b03166001600160601b0316815260200190815260200160002054600003610c3157600091505b80600003610c3d575060035b915091565b50600090506003915091565b80356001600160a01b0381168114610c6557600080fd5b919050565b60008060408385031215610c7d57600080fd5b610c8683610c4e565b946020939093013593505050565b600060208284031215610ca657600080fd5b5035919050565b80356001600160601b0381168114610c6557600080fd5b600060208284031215610cd657600080fd5b610cdf82610cad565b9392505050565b60008060408385031215610cf957600080fd5b610c8683610cad565b600060208284031215610d1457600080fd5b610cdf82610c4e565b60008083601f840112610d2f57600080fd5b50813567ffffffffffffffff811115610d4757600080fd5b602083019150836020828501011115610d5f57600080fd5b9250929050565b60008060008060608587031215610d7c57600080fd5b84359350602085013567ffffffffffffffff811115610d9a57600080fd5b610da687828801610d1d565b9598909750949560400135949350505050565b60008060008060808587031215610dcf57600080fd5b610dd885610c4e565b93506020850135925060408501359150610df460608601610c4e565b905092959194509250565b600080600060408486031215610e1457600080fd5b83359250602084013567ffffffffffffffff811115610e3257600080fd5b610e3e86828701610d1d565b9497909650939450505050565b60008060208385031215610e5e57600080fd5b823567ffffffffffffffff811115610e7557600080fd5b610e8185828601610d1d565b90969095509350505050565b60208082526022908201527f416363657373206e6f7420616c6c6f7765643a20476f7665726e6f72206f6e6c6040820152613c9760f11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ef857610ef8610ecf565b92915050565b600060018201610f1057610f10610ecf565b5060010190565b81810381811115610ef857610ef8610ecf565b8781528660208201526c6372656174654469737075746560981b604082015285604d82015284606d8201528284608d83013760609190911b6bffffffffffffffffffffffff1916608d919092019081019190915260a10195945050505050565b87815286602082015285604082015284606082015260c060808201528260c0820152828460e0830137600081840160e0908101919091526001600160a01b039290921660a0820152601f909201601f19169091010195945050505050565b602080825260169082015275111a5cdc1d5d1948191bd95cc81b9bdd08195e1a5cdd60521b604082015260600190565b60006020828403121561102a57600080fd5b81518015158114610cdf57600080fd5b8082028115828204841417610ef857610ef8610ecf56fea26469706673582212207e42e3113b83e97e687ffe3c7ff24a863b4ac22439b2f1f664e755e044a3cc0164736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c8063979f8e65116100a0578063dea580b911610064578063dea580b9146103e7578063e4c0aaf414610407578063eaff425a14610427578063ebb711941461043c578063f7434ea91461045c57600080fd5b8063979f8e65146102d2578063a60a4db5146102f2578063c13517e114610312578063ce0aaf9514610325578063d3c617ff1461034557600080fd5b806345c90441116100e757806345c90441146102115780634def54551461023e57806367c519471461027257806369cd2cea1461029257806393626084146102b257600080fd5b80630c340a24146101245780631debaba6146101615780632e1db8901461018357806336e41d3d146101c75780633fc8cef3146101dd575b600080fd5b34801561013057600080fd5b50600254610144906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016d57600080fd5b5061018161017c366004610c6a565b61047c565b005b34801561018f57600080fd5b506101b961019e366004610c94565b6000908152600760205260409020546001600160f81b031690565b604051908152602001610158565b3480156101d357600080fd5b506101b960065481565b3480156101e957600080fd5b506101447f000000000000000000000000000000000000000000000000000000000000000081565b34801561021d57600080fd5b506101b961022c366004610cc4565b60016020526000908152604090205481565b34801561024a57600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b34801561027e57600080fd5b5061018161028d366004610ce6565b6104ed565b34801561029e57600080fd5b506101816102ad366004610d02565b610570565b3480156102be57600080fd5b50600554610144906001600160a01b031681565b3480156102de57600080fd5b506101b96102ed366004610d66565b6105bc565b3480156102fe57600080fd5b5061018161030d366004610db9565b61078a565b6101b9610320366004610dff565b6109aa565b34801561033157600080fd5b50600454610144906001600160a01b031681565b34801561035157600080fd5b506103a9610360366004610c94565b60076020526000908152604090208054600182015460028301546003909301546001600160f81b03831693600160f81b90930460ff16926001600160a01b039283169290911685565b604080516001600160f81b03909616865293151560208601526001600160a01b0392831693850193909352606084015216608082015260a001610158565b3480156103f357600080fd5b50600354610144906001600160a01b031681565b34801561041357600080fd5b50610181610422366004610d02565b6109f5565b34801561043357600080fd5b506101b9600381565b34801561044857600080fd5b50610181610457366004610c94565b610a41565b34801561046857600080fd5b506101b9610477366004610e4b565b610b6f565b6002546001600160a01b031633146104af5760405162461bcd60e51b81526004016104a690610e8d565b60405180910390fd5b6104b98142610ee5565b6006555060038054600580546001600160a01b038084166001600160a01b0319928316179092559091169216919091179055565b6002546001600160a01b031633146105175760405162461bcd60e51b81526004016104a690610e8d565b6001600160601b03821660008181526001602052604090819020839055517f20a6ef9c48f3a1ae927e70bc34e82d974c53d3c98c8fd9e731c4bacd5842c596906105649084815260200190565b60405180910390a25050565b6002546001600160a01b0316331461059a5760405162461bcd60e51b81526004016104a690610e8d565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60006105c88484610b6f565b8210156106175760405162461bcd60e51b815260206004820152601f60248201527f4e6f74207061696420656e6f75676820666f72206172626974726174696f6e0060448201526064016104a6565b60008054908061062683610efe565b9091555090504660008161063b600143610f17565b4084898989336040516020016106579796959493929190610f2a565b60408051601f19818403018152828252805160209182012060a0840183526001600160f81b038088168552600085840181815233878701908152606088018c815260808901848152868552600790975296909220965190511515600160f81b02921691909117855551600185810180546001600160a01b039384166001600160a01b031991821617909155945160028701559251600390950180549590911694909316939093179091559091507f0d14de2c628befa6eb7dc5c0b952832c96822914f589200f72acb5d8869982469082906107329043610f17565b40858a8a8a3360405161074b9796959493929190610f8a565b60405180910390a1604051339084907f141dfc18aa6a56fc816f44f0e9e2f1ebc92b15ab167770e17db5b084c10ed99590600090a35050949350505050565b60035484906001600160a01b03163314806107bb5750600654421080156107bb57506005546001600160a01b031633145b6108135760405162461bcd60e51b8152602060048201526024808201527f416363657373206e6f7420616c6c6f7765643a20566561204f7574626f78206f60448201526337363c9760e11b60648201526084016104a6565b6004546001600160a01b038281169116146108815760405162461bcd60e51b815260206004820152602860248201527f416363657373206e6f7420616c6c6f7765643a2053656e64657220476174657760448201526730bc9037b7363c9760c11b60648201526084016104a6565b6000848152600760205260408120805490916001600160f81b0390911690036108bc5760405162461bcd60e51b81526004016104a690610fe8565b8054600160f81b900460ff16156109095760405162461bcd60e51b815260206004820152601160248201527043616e6e6f742072756c6520747769636560781b60448201526064016104a6565b80546001600160f81b0316600160f81b811782556003820180546001600160a01b038681166001600160a01b031990921691909117909155600183015460405163188d362b60e11b81526004810193909352602483018790521690819063311a6c5690604401600060405180830381600087803b15801561098957600080fd5b505af115801561099d573d6000803e3d6000fd5b5050505050505050505050565b60405162461bcd60e51b815260206004820152601b60248201527f466565732073686f756c64206265207061696420696e2057455448000000000060448201526000906064016104a6565b6002546001600160a01b03163314610a1f5760405162461bcd60e51b81526004016104a690610e8d565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600760205260408120805490916001600160f81b039091169003610a7c5760405162461bcd60e51b81526004016104a690610fe8565b8054600160f81b900460ff16610ac45760405162461bcd60e51b815260206004820152600d60248201526c139bdd081c9d5b1959081e595d609a1b60448201526064016104a6565b6002810180546000909155600382015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b699190611018565b50505050565b6000806000610bb385858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610be592505050565b6001600160601b0382166000908152600160205260409020549193509150610bdc90829061103a565b95945050505050565b6000806040835110610c4257602083015191506040830151905060016000836001600160601b03166001600160601b0316815260200190815260200160002054600003610c3157600091505b80600003610c3d575060035b915091565b50600090506003915091565b80356001600160a01b0381168114610c6557600080fd5b919050565b60008060408385031215610c7d57600080fd5b610c8683610c4e565b946020939093013593505050565b600060208284031215610ca657600080fd5b5035919050565b80356001600160601b0381168114610c6557600080fd5b600060208284031215610cd657600080fd5b610cdf82610cad565b9392505050565b60008060408385031215610cf957600080fd5b610c8683610cad565b600060208284031215610d1457600080fd5b610cdf82610c4e565b60008083601f840112610d2f57600080fd5b50813567ffffffffffffffff811115610d4757600080fd5b602083019150836020828501011115610d5f57600080fd5b9250929050565b60008060008060608587031215610d7c57600080fd5b84359350602085013567ffffffffffffffff811115610d9a57600080fd5b610da687828801610d1d565b9598909750949560400135949350505050565b60008060008060808587031215610dcf57600080fd5b610dd885610c4e565b93506020850135925060408501359150610df460608601610c4e565b905092959194509250565b600080600060408486031215610e1457600080fd5b83359250602084013567ffffffffffffffff811115610e3257600080fd5b610e3e86828701610d1d565b9497909650939450505050565b60008060208385031215610e5e57600080fd5b823567ffffffffffffffff811115610e7557600080fd5b610e8185828601610d1d565b90969095509350505050565b60208082526022908201527f416363657373206e6f7420616c6c6f7765643a20476f7665726e6f72206f6e6c6040820152613c9760f11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ef857610ef8610ecf565b92915050565b600060018201610f1057610f10610ecf565b5060010190565b81810381811115610ef857610ef8610ecf565b8781528660208201526c6372656174654469737075746560981b604082015285604d82015284606d8201528284608d83013760609190911b6bffffffffffffffffffffffff1916608d919092019081019190915260a10195945050505050565b87815286602082015285604082015284606082015260c060808201528260c0820152828460e0830137600081840160e0908101919091526001600160a01b039290921660a0820152601f909201601f19169091010195945050505050565b602080825260169082015275111a5cdc1d5d1948191bd95cc81b9bdd08195e1a5cdd60521b604082015260600190565b60006020828403121561102a57600080fd5b81518015158114610cdf57600080fd5b8082028115828204841417610ef857610ef8610ecf56fea26469706673582212207e42e3113b83e97e687ffe3c7ff24a863b4ac22439b2f1f664e755e044a3cc0164736f6c63430008120033",
  "devdoc": {
    "events": {
      "DisputeCreation(uint256,address)": {
        "details": "To be emitted when a dispute is created.",
        "params": {
          "_arbitrable": "The contract which created the dispute.",
          "_disputeID": "ID of the dispute."
        }
      },
      "Ruling(address,uint256,uint256)": {
        "details": "To be raised when a ruling is given.",
        "params": {
          "_arbitrable": "The arbitrable receiving the ruling.",
          "_disputeID": "ID of the dispute in the Arbitrator contract.",
          "_ruling": "The ruling which was given."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "arbitrationCost(bytes)": {
        "details": "Compute the cost of arbitration. It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.",
        "params": {
          "_extraData": "Can be used to give additional info on the dispute to be created."
        },
        "returns": {
          "cost": "Required cost of arbitration."
        }
      },
      "changeCourtJurorFee(uint96,uint256)": {
        "details": "Changes the `feeForJuror` property value of a specified court.",
        "params": {
          "_courtID": "The ID of the court.",
          "_feeForJuror": "The new value for the `feeForJuror` property value."
        }
      },
      "changeGovernor(address)": {
        "details": "Changes the governor.",
        "params": {
          "_governor": "The address of the new governor."
        }
      },
      "changeReceiverGateway(address)": {
        "details": "Changes the sender gateway.",
        "params": {
          "_senderGateway": "The address of the new sender gateway."
        }
      },
      "changeVea(address,uint256)": {
        "details": "Changes the outbox.",
        "params": {
          "_gracePeriod": "The duration to accept messages from the deprecated bridge (if at all).",
          "_veaOutbox": "The address of the new outbox."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "relayRule(address,bytes32,uint256,address)": {
        "notice": "Relay the rule call from the home gateway to the arbitrable."
      }
    },
    "notice": "Foreign Gateway Counterpart of `HomeGateway`",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10873,
        "contract": "src/gateway/ForeignGatewayOnGnosis.sol:ForeignGatewayOnGnosis",
        "label": "localDisputeID",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10877,
        "contract": "src/gateway/ForeignGatewayOnGnosis.sol:ForeignGatewayOnGnosis",
        "label": "feeForJuror",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint96,t_uint256)"
      },
      {
        "astId": 10879,
        "contract": "src/gateway/ForeignGatewayOnGnosis.sol:ForeignGatewayOnGnosis",
        "label": "governor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10881,
        "contract": "src/gateway/ForeignGatewayOnGnosis.sol:ForeignGatewayOnGnosis",
        "label": "veaOutbox",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10886,
        "contract": "src/gateway/ForeignGatewayOnGnosis.sol:ForeignGatewayOnGnosis",
        "label": "senderGateway",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10888,
        "contract": "src/gateway/ForeignGatewayOnGnosis.sol:ForeignGatewayOnGnosis",
        "label": "deprecatedVeaOutbox",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10890,
        "contract": "src/gateway/ForeignGatewayOnGnosis.sol:ForeignGatewayOnGnosis",
        "label": "deprecatedVeaOutboxExpiration",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10895,
        "contract": "src/gateway/ForeignGatewayOnGnosis.sol:ForeignGatewayOnGnosis",
        "label": "disputeHashtoDisputeData",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(DisputeData)10844_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(DisputeData)10844_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ForeignGatewayOnGnosis.DisputeData)",
        "numberOfBytes": "32",
        "value": "t_struct(DisputeData)10844_storage"
      },
      "t_mapping(t_uint96,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint96",
        "label": "mapping(uint96 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DisputeData)10844_storage": {
        "encoding": "inplace",
        "label": "struct ForeignGatewayOnGnosis.DisputeData",
        "members": [
          {
            "astId": 10835,
            "contract": "src/gateway/ForeignGatewayOnGnosis.sol:ForeignGatewayOnGnosis",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint248"
          },
          {
            "astId": 10837,
            "contract": "src/gateway/ForeignGatewayOnGnosis.sol:ForeignGatewayOnGnosis",
            "label": "ruled",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10839,
            "contract": "src/gateway/ForeignGatewayOnGnosis.sol:ForeignGatewayOnGnosis",
            "label": "arbitrable",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10841,
            "contract": "src/gateway/ForeignGatewayOnGnosis.sol:ForeignGatewayOnGnosis",
            "label": "paid",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10843,
            "contract": "src/gateway/ForeignGatewayOnGnosis.sol:ForeignGatewayOnGnosis",
            "label": "relayer",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}
